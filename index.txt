----------------------------------------------------------------------------
Konsep - konsep dasar pemprograman
# Variabel
# Tipe data
# Penkondisian
# Pengulangan
# Object
# Function
# Array 

-> Program 
-> Pemprograman
-> Bahasa Pemprograman

# gimana cara nulis program, disimpan dimana programnya dan bagaimana menjalankan program itu sendiri 

-> Pemprograman mengajarkan kita untuk teliti, displin dan berpikir abstrak
# teliti : pada saat menuliskan code tidak boleh salah satu karakterpun, kurang titik, kurang titik koma itu akan jadi masalah 
# displin : karena tiap - tiap bahasa pemprograman punya aturan yang berbeda - berbeda dalam menuliskan code mereka, jadi harus mengkikuti aturan dari bahasa tersebut
# abstrak : Menyembunyikan kompleksitas / Kerumitan pada saat memandanng sebuah masalah 

-> Mengubah komputer menjadi alat yang powerful
# Membuat aplikasi untuk menyelesaikan sebuah masalah 

-> Membentuk pola pikir komputasional 
# Dekomposisi
# Pengenalan pola 
# Genralisasi 
# Algorihma 
------------------------------------------------------------------------------

------------------------------------------------------------------------------
-> Program
# Program adalah kumpulan / serangkaian instruksi 
# instruksi yang kita berikan ke komputer 
# Program adalah urutan instruksi terstruktur, yang dirancang agar komputer berperilaku dengan ketentuan, dengan tujuan untuk menyelesaikan sebuah pekerjaan
# intinya adalah instruksi / kumpulan instruksi 
# instruksi harus sederhana, harus terstruktur dan sama - sama dimengerti oleh kedua belah pihak 
# instruksinya harus terstruktur dan tidak boleh terkutar, urutan disini sangatt berpengaruh 
* instruksi untuk komputer 
# memberi perintah untuk komputer 
# perintah yang diberikan melalui bahasa pemprograman tertentu 
# intruksi yang diberikan harus simple dan sederhana 
* instruksi yang sederhana 
# melakukan operasi matematika 
# menampilkan tulisan ke layar 
# mengubah ukuran, posisi, atau warna dari sebuah pixel yang ada dilayar 
# Kenapa sederhana ?
* Perilaku Komputer 
# komputer tidak begitu pintar 
# penurut, mengerjakan apa pun yang diinstruksikan, mau instruksinya benar atau salah akan dikerjain  
# tidak kenal lelah, diberikan satu intruksi dikerjakan sebanyak seribu x pasti dikerjain 
# berikanlah instruksi yang benar 
# instruksi pada komputer itu disebut dengan statement 
# statement perintah untuk komputer dalam bahasa pemprograman tertentu    

-> Pemprograman
# cara kita untuk memberikan instruksi yang simple dan terstruktur pada komputer 
# instruksi yang kita berikan harus benar dan masuk akal 
# instruksi yang kita berikan harus sesuai dengan aturan pada bahasa pemprograman tertentu 
-------------------------------------------------------------------------------

------------------------------------------------------------------------------
-> Bahasa Pemprograman 
# bahasa pemprograman mulai ada, sejak komputer pertama x ada 
# bahasa yang dipahami oleh komputer adalah bahasa mesin 
# cpu memahami bahasa mesin,bahasa yang mendekati bahasa mesin ialah assembly 
# bahasa tingkat rendah / low level language 
# bahasa yang mendekati bahasa manusia disebut bahasa tingkat tinggi / high level languge 
# semakin keatas bahasanya mudah untuk ditulis dan dibaca oleh manusia, tapi semakin lambat, kenapa harus diterjemahkan dan dioptimasi ke dalama bahasa mesin 
# bagaiman menuliskan bahasa tersebut menjadi kode - kode program atau yang dinamkan source code 
# apapun bahasanya, menuliskan source code untuk diterjemahkan kedalam bahasa mesin 
* untuk mulai menulis program, source code atau statement ada tiga hal yang harus diperhatikan 
# Bagaimana menulis source code, nulisnya dimana, menggunakan aplikasi apa, dan gimana nulisnya 
# Bagaimana source code tadi dikonversi ke bahasa mesin, ini biasnya dikerjakan secara otomatis, tau menkanisme atau konsep dibalik konversi tersebut 
# bagaimana mengeksekusi source code kita 

-> Menulis source code 
# bahasa pemprograman ditulis dengan text sederhana atau yang disebut dengan plain text 
--------------------------------------------------------------------------------
-> 3 hal penting pada saat membuat program 
#  bagaimana menuliskan source code yang kita buat 
#  bagaimana menterjemahkan source kita menjadi bahasa mesin 
# bagaimana mengeksekusi source code yang telah kita buat 

# ada dua cara menterjemahkan source code yang kita buat kedalam bahasa mesin agar bisa kita jalankan 
# ada source yang kita compile, dengan sesuatu yang namanya compiler 
# ada yang harus kita terjemahkan, atau kita interpretasi menggunakn interpreter 

-> Compiler 
# siap dijalankan oleh user, programnya cenderung lebih cepat, karena sudah teroptimasi kedalam bahasa mesin 
# source codenya cenderung lebih aman karena yang dilihat oleh user adalah hasil compilenya bukan source codenya, source codenya tetap ada di programernya 
# tidak lintas platform, tidak lintas sistem operasi, karena begitu dicompile hasil compilenya hanya compatibel untuk sistem operasi tertentu, bahkan ketika sistem operasinya sama cpunya berbeda ada kemungkinan programnya juga tidak jalan, jadi harus dicompile ulang 
# tidak fleksibel, karena ketika ada kesalahan atau ingin memodifikasi programnya harus melakukan compile ulang, karena compile adalah langkah tambahan setelah ngoding 

-> Interpreter  
# lintas plaform, tidak peduli sistem operasinya apa atau cpunya apa, asal user punya interpreternya source codenya akan bisa dijalankan, selama user punya browser javascriptnya bisa dijalankan 
# kodenya lebih fleksibel, karena tidak perlu melakukan compile ulang, mudah untuk dimodifikasi dan mudah untuk diuji, sedangkan kekuranganya adalah user butuh interpreter,
# lebih lambat, karena setiap kali buka program harus interpretasi dulu menggunakan interpreter 
# source code mudah diakses oleh orang lain 

-> Hybrid / intermediate language / byte code   
# Mengabungkan kelebihanya compiler  dan kelebihanya interpreter 

-> Kenapa belajar javascript 
# gratis : tidak perlu membeli softwarenya tau licensenya 
# tidal perlu proses instalasi : karena tiap - tiap browser sudah memiliki javascript didalamnya atau yang disebut engine / interpreter javascript 
# hanya butuh web browser 

-> Javascript is a high-level, scripting, untyped, and interpreted programming language
# High level language : bahasanya lebih mudah dimengerti 
# scripting language : javascript dibuat untuk berinteraksi dengan halaman web, setidaknya tujuan awal diciptakanya, javascript spesipik untuk aplikasi web, 
javascript adalah sebuah bahasa scripting, bahasa yang tertanam didalam sebuah program yang lebih besar, yang hanya bisa menggunakan bahasa scripting yang hanya program tersebut  
# untyped : dua kategori bahasa pemprograman, bagaimana mengolah tipe data didalamnya ada yang disebut dengan typed, ada yang disebut untyped
javascript dikategorikan sebagai bahasa yang untyped / dynamically typed 
# membuat variable didalam bahasa yang untyped, variablenya bisa diisi oleh tipe data yang berbeda, awal angka terakhir bisa huruf, sedangkan yang typed tidak 
# jadi javascript memilih kategori untyped memudahkan karena tidak dibingungkan pendeklarasian tipe data, pendefinisian tipe data diawal memiliki keuntungan efisiensi memori, pencegahan logika yang salah      
# interpreted : javascript merupakan bahasa pemprograman yang harus dijalankan menggunakan interpreted 

# funfunfunction 
  "easy to learn, hard to master"

-> Javascript bisa apa ?
-> client side Web Develoment /  front end develoment  : membuat dan mendukung pembuatan aplikasi web dari sisi client 
# native javascript / Vanilla JavaScript / Javascript biasa / javasciprt yang menggunakan library atau framework 
# Mengembangkan web dengan bantuan framework dan library: Jqoery, React, ember, backbone dll. itu semua framework dan library digunakan untuk membantu membantu dan mempercepat penulisan javascript 

-> Server side Develoment / back end develoment 
# pembanguna aplikasi yang berjalan disisi server  
# dibuat sebuah library yang namanya nodejs yang javascript dapat berjalan diservernya sendiri 
# express js 

-> Browser Extension / Add-on
-> Dekstop Applications 
# Electrron, AppJS
-> Mobile App Develoment 
# Jquery Mobile, Cordova / PhoneGap 
->IoT & Robotics
# CyclonJs, Johnny-Five

-> JSON (Javascript object notation)
# Skema atau format data  / pertukaran data 
# dibuat berdasarakn object pada javascript  

# c++, C#, java, Obj-c yang merupakan bahasa pemprograman yang membuat aplikasi dekstop yang berjalan disebuah aplikasi tertentu 


-> Sejarah Javascript 
# Mocha = LiveScript = javascript = ecmascript 
# Douglas Crockford 

-> Lingkungan pemgembangan / Develoment Environment 
# sebuah sistem atau tools dimana nantinya kita akan menuliskan program kita 
# ada dua cara berinteraksi dengan interpreter javascript yang ada di browser 
   1. console dev tools yang ada ditiap - tiap browser 
      - bisa menuliskan perintah javascript atau syntax javascript pada console 
      - untuk mengetahui error atau kelasahan pada javascript 
      - untuk melalukan debug  
   2. dengan menuliskan script  javascriptnya sendiri di halaman HTML 
      - cara menuliskan ad dua cara  
         - simpan difile yang sama di dalam file HTMLnya
         - membuat file javascript terpisah 
         
-> Menulis Javascript 
# internal & eksternal 
# internal : menuliskan syntax javascript lansung didalam tag script dihalaman / didokumen website 
# eksternal : membuat file terpisah 
# menyimpan javascript diakhir : seluruh halaman html diload dahulu ke dalaman memori baru kemudian jalankan javascriptnya 
# sebuah fungsi console.log : untuk menuliskan sesuatu ke dalam console di browser 

-> Nilai dan tipe data 
# membaca, memodifikasi, membuat data baru & menghapusnya
# semua data tersimpan kedalam serangkaian bit 
# bit / binary digit / bilangan biner, adalah satuan terkecil dari data yang ada dikomputer kita
# nilainya 0 dan 1
# secara elektronika atau hardware di dalam komputer digit 1 terjadi ketika salah satu komponen komputer namanya transistor dialiri oleh listrik, saat transistor dialiri oleh listrik maka terjadi bit 1 bit 0 ketika trasistor tidak dialiri listrik 
# 23 bagaimana komputer merepsentasikan 
# bilangan desimal 0 - 9
# semua data direpresentasikan dalam bilangan biner 
# komputer membagi bit - bit tersebut kedalam beberapa potongan 
# potongan - potongan itu disebut values / nilai 
# nilai tersebut terbuat dari sekumplan bit, nilai - nilai itu memiliki peran yang berbeda, peran ini yang disebut tipe data / data types 
# didalam javascript ada enam tipe data 
  -> number / angka
  -> string 
  -> boolean 
  -> object 
  -> function 
  -> undefined
# peran bit - bit yang ada didalam komputer 
# membuat atau  menggunakan sebuah nilai yang memiliki peran  hanya perlu memanggil namanya 

# bagaimana cara membuatnya, digunakan untuk apa, gimana cara pakainya 

-> tipe data string dalam javascript 
# Tipe data string dalam javascript digunakan untuk merepresentasikan data tekstual / plain text
# untuk menuliskan string pada javascript yang perlu kita lakukan hanya membungkus data atau nilai kita menggunakan tanda '' atau "", fungsinya sama aja 
# escape character : berfungsi untuk menampilkan sebuah karakter yang diinterpretasikan berbeda dalam sebuah halaman 
# Concatenation / konkatenasi + sebagai pengabung dua atau lebih string 
# membandingkan dua buah string 
# sebuah fungsi pada string : .length : menghitung panjang dari sebuah string 

-> tipe data angka / number
# numbers in javascript are double-precision floating point 64-bit formar IEEE 754 values
# tidak ada integer, yang ada hanya floating point / bilangan pecahan
# ukuran angka yang ditamoung 64bit 
# menyimpan angka 2 pangkat 64bit : 18 X 10 pangkat 18
# angka tersebut tidak bisa dipakai semua 
# ada beberapa penanda untuk menampung angka angak tertentu 
# angka tanpa desimal / integer 
   - tingkat akurasi hanya 15 digit
# angka dengan desimal 
  - menyimpan 17 digit dibelakang koma
  - hati - hati menghitung bilangan pecahan hasilnya tidak terlalu akurat    
# eksponen
   - 123e5
   - 123e-5
# bilangan negatif
  
# 64 bit tidak bisa dipakai untuk menuliskan bilangan bulat positif aja
# banyak hal yang bisa digunakan 
# 1 bit digunakan jika penandanya bilangan negatif 
# 11 bit digunakan untuk eskponen 
# sisanya 52bit digunakan untuk angka sebenarnya termasuk untuk menyimpan titik untuk pecahan 
# jangan pernah mengawali angka dijavascript dengan 0, bilangan dianggap bilangan oktal bukan bilangan desimal 
# bilangan desimal basis 10 dari 0 - 9 
# bilangan oktal basis 8 angka dimulai 0 - 7 
   - 022
# sama seperti mengawali angka dengan 0x, akan dianggap sebagai bilangan hexadesimal bilangan basis basis 16 di mulai dari 0 - 9 sampai a - f   
   - 0xff

# Angka spesial 
 - Infinity 
     2 / 0 : Infinity
 - -Infinity 
     -2 / 0 : -Infinity
 - NaN (NOt a number)
  - dihasilkan ketika membagi sebuah angka dengan string 
  - membagi string didalam string ada angka, disini javascript membaca string tersebut sebagai angka dan akan melakukan perhitungan sebagaimana membagi angka 
     0 / 0 : NaN

-> tipe data boolean 
# sebuah tipe data yang digunakan untuk merepresentasikan logika true atau false 
# sebuah konsep yang sudah ada sebelum javascript 
# boolean ada didalam aljabar 
# biasanya digunakan pada statement pengkondisian, untuk menentukan aksi yang berbeda dan mengatur alur kendali program 
# boolen memiliki dua buah nilai true | false 
# true dihasilkan ketika kondisinya bernilai benar 
# false dihasilkan ketika kondisinya bernilai salah 
# tidak hanya angka yang bisa dicek menggunakan boolean, tetapi string juga bisa 
# nilai - nilai yang ada pada javascript  menyimpan true atau false didalamnya 
# truthy dan falsy

# undefined : mendeklarasikan sebuah variable tapi tidak mengisikan nilainya 
# null : adalah nilai kosong yang bisa diberikan kepada sebuah variabel  

->Operator pada javascript 
# sebuah simbol yang digunakan untuk melakukan operasi
# Operator 
   - aritmatika
   - penugasan
   - perbandingan
   - logika
   - string
   - operator binary 
   - operator dapat dibagi berdasarkan operandnya 



   - kondisional : operator ternary
   - typeof : unary

# operator binary : membutuhkan 2 operand 
# unary: membutukan 1 operand
# ternary: operator yang membutuhkan 3 buah operand 

-> operator artimatika / operator matimatika 
  +, -, *, /, %
  % : modulo, modulus, sisa bagi 
# urutan operasi matematika / operator precedence 
 - ada operator yang dikerjakan terlebih dahulu terlepas dimana menempatakan didalam sebuah expresi 
 - Kukabataku, () * / + - 

-> operator penugasan / assigment
# = digunakan ketika bekerja dengan variabel 
# x = 10 : menugaskan angka 10 didalam variabel x 
# masih ada beberapa operator penugasan 
# +=, -=, *=, /=, %=
# nilai yang sebelumnya disimpan dalam sebuah variabel tidak akan hilang, akan dilakukan operasi terlebih dahulu 

-> operator perbandingan / comparison 
# untuk membandinkan dua buah operand 
# menghasilkan sebuah nilai boolean true atau false 
# === perbandingan yang strict istilah lainya operator identitas 
   - tidak hanya membandingkan nilai tetapi juga type datanya 

-> operator logika  
# operator ini digunakan untuk menentukan logika dari beberapa expresi yang akan digabungkan 
# &&, ||, !

-> operator string 
# didalam javascript tanda + memiliki dua fungsi 
# jika operandny adalah angka dia akan menjadi operator aritmatika 
# jika operandnya string atau tulisan, akan berubah menjadi operator pengabung string 

-> operator typeof
# untuk mengetahui type data apa dari nilai yang kita masukkan kedalamnya 
# typeof(operand)
# operator unary

-> operator kondisional 
# operator ternary : membutuhkan tiga operand didalamnya 
# operator ini digunakan untuk melakukan pengecekkan pada sebuah kondisi dan menentukan nilai yang dihasilkan ketika kondisinya bernilai true atau false 
# (kondisi) ? benar : salah       

-> Variabel
# sebuah "tempat / wadah" yang memiliki nama, yang digunakan untuk menyimpan nilai 
# nilainya macam - macam bisa angka bisa tulisan, boolean
# deklarasi, inisialisasi, assigment 
  - deklarasi : mendaftarkan variabel ke dalam lingkup yang sesuai 
  - inisialisasi : menyediakan memori untuk variabel 
  - assigment : menetapkan nilai yang spesipik ke dalam variabel 
# var x; // deklarasi & inisialisasi variable x 
      - variable tersebut akan didafatarkan pada lingkup yang sesuai, akan dipesan 1 blok memori untuk meyimpan nilai di dalamnya 
  x = 20 // assigment 
   - menugaskan angka 20 untuk disimpan kedalam variabel x 
 # wajib melakukan deklarasi dan inisialisasi 
# keyword lain untuk mendeklarasikan variabel 
  - var, let, const memiliki perilaku yang berbeda 
# ada juga beberapa kata yang tidak boleh digunakan sebagai nama variabel kata tersebut dinamakan keyword atau reserved word 
# keyword & reserved word kata yang digunakan sebagai bagian dari syntax javascript 
# shorthand : syntax untuk menyinkat penulisan variable
# variable scope / lingkup variable : untuk menggunakan variable secara tepat, perlu pemahaman tentang function dan object 

-> popup box / dialog box 
# sebuah window kecil pada browser kita yang dapat kita munculkan sebagai alat interaksi yang digunakan agar user dapat berdialog dengan halaman web 
# ada tiga buah pop box. alert, prompt, confirm
# alert box
  - fungsi memunculkan window kecil yang ada pesan dan tombol ok 
  - memberikan pesan sederhana ke user 
# prompt box
  - ada nilai yang diambil 
  - dan mengembalikan nilai
  - nilai yang dikembalikan apa pun yang diketik oleh user 
# confirm
  - digunakan konfirmasi dari user   
  - mengembalikan nilai   
  - mengembalikan nilai boolean true | false 
     - true ketika menekan tombol ok
     - false ketika menekan tombol cancel 
  - biasanya digunakan pada penkondisian dan pengulangan 
  
-> control flow / alur kendali 
# di dalam pemprograman ada yang disebut dengan normal flow / alur normal 
#  apabila program kita memiliki lebih dari satu statement, maka statement tersebut akan dieksekusi dari atas ke bawah atau dari kiri ke kanan 
# pengulanagn dan pengkondisian 
# pengulangan / loop / iteration 
   - sebuah konsep untuk mengerjakan / mengekskusi sebuah statement yang sama lebih dari satu kali / berulang 
   - syntax pengulangan pada javascript 
     - for 
     - while 
     - do while 
 # pengkondisian atau percabangan
   - sebuah keadaan dimana program bisa memilih untuk mengeksekusi statement yang berbeda berdasarakan kondisi yang diberikan
   - syntax pengkondisian 
      - if 
      - if.. else
      - if.. else if.. else
      - switch          

-> while 
# selama kondisi bernilai true lakukan aksi yang ada didalamnya, kalau kondisi bernilai false aksinya tidak akan dilakukan      
# infinte loop / looping forever : loop tidak akan pernah akan berakhir 
# looping dihentikan oleh aksi dari user 
# dihentikan oleh program itu sendiri

# nilai awal 
# kondisi terminasi / kapan loopnya akan berhenti
# increment / penambahan atau decrement / pengurangan terhadap nilai awal  

-> for
# for adalah keyword lain, dapat digunakan untuk melakukan pengulangan selain while  
   
-> Tabel penelusuran / trace table / dry-run test 
# untuk mengetahui perubahan variabel yang ada didalam pengulangan 
# tuliskan nama-nama variabel yang nilainya kemungkinan berubah, setiap loopnya 


->Pengkondisian / percabangan 
# if..else
# if..else if..else
  - else if digunakan ketika punya kondisi lain selain if dan else

-> pengulangan dan pengkondisian bersarang 
# ada pengulangan untuk mencetak baris, ada pengulangan untuk mencetak berapa bintang pada baris tersebut 
# jumlah bintang yang ada tiap baris sesuai dengan nomor barisnya  

->switch
# tidak memiliki kondisi yang banyak 
# kondisi hanya ada 1

-> "ingin menyelesaikan sebuah persoalan jawabanya gak cuma 1 bisa ada kemungkinan banyak, dilihat mana yang lebih efektif daripada yang lain"

-> fUNCTION
# apa itu function ?, gimana cara bikinya, gimana cara pakainya, perilakunya seperti apa 
# function adalah kunci utama pada javascript yang membuat javascript sangat powerful , douglas crakford
#  di bahasa pemprograman lain ada istilah method, class, constructor, module, dijavascript semua hal tersebut bisa dilakukan hanya oleh function 
# sebuah sub-program / sub routine yang dapat 'dipanggil' di bagian lain pada program 
# program yang ada didalam program lainya
# merupakan struktur dasar pembentuk dari javascript / fundemental building block
# disebut juga sebagai prosedur (kumpulan statement untuk melakukan tugas atau menghitung sebuah nilai)
# untuk dapat menggunakanya, kita harus 'membuat' terlebih dahulu function tersebut, lalu 'memanggilnya'
# termasuk kedalam first class object 

-> kenapa function ? 
# reusability (dry : do not repeat yourself)
  - pengunaan kembali dari kode yang sudah kita buat / dry 
  - daripada menulis kode program berulang - ulang dengan menggunakan function, cukup menuliskan satu buah blok program atau sub program 
  cukup sekali, panggil berulang - ulang 
# Dekomposisi / Abstraksi 
  - untuk menyembuyikan kompleksitas dari program yang kita buat  
  - karena dipecah - pecah bagian dari programnya 
# modularitas 
  - ketika menyembunyikan kompleksitasnya dengan cara membuat program kita menjadi sub program atau modul modul akan memudahkan kita pada saat akan menelusuri kesalahan, pada saat proses debuging 
-> kategori function berdasarakan pembuatanya 
# Built-in Function / function yang dibuatkan oleh javascript 
# User defined function / function yang kita buat sendiri    

  -> built in function 
    - Fungsi yang disediakan / 'dibuat' oleh javascript
    - Kita tinggal 'memanggilnya' saja 
       - contoh 
         - alert ();
         - confirm ();
         - prompt ();
     - dan masih banyak yang lain 
# javascript selalu memulai index selalu dari 0 


   -> user defined function 
    - Fungsi yang dibuat oleh kita sendiri 
    - menggunakan keyword function 
    - nama function(optional)
    - parameter / argument / bahan baku 
      - disimpan ()
      - boleh ada atau tidak, jika ada boleh lebih dari satu 
      - jika lebih satu pisah parameter(,)

    - function body, 'dibungkus' dengan {}      
    - dapat mengembaliakan nilai (return value) atau tidak mengembalikan nilai
    # cara buat nya ada dua 
      - dengan deklarasi / function declaration 
      - dengan expression / function expression
     
     # terkait dengan function 
     - user-defined function 
     - function declaration vs function expression 
     - Parameter / Argument
     - Return value, kapan boleh ada, kapan boleh gak ada 
     - scope, lingkup dari function 
     - refactoring, lebih efektif lagi menuliskan program kita 
     - Hoisting, perilaku interpreter javascript dalam membaca baris baris program 
     - Closure, terkait dengan function expression 
     - Recursion, bagaimana sebuah function memanggil dirinya sendiri 

-> Cara kerja sebuah function 
  # function yang baik hanya mengerjakan satu hal saja secara spesipik 
  # blok kode yang dibuat untuk melakukan tugas yang spesipik 
  # dapat dipangil berulang ulang kali 
  # Memudahkan kita untuk melakukan penulusuran / bagian mana di dalam program yang error
  # Reusability / pengunaan ulang dari kode program kita 

->parameter dan argument 
# material atau bahan baku yang digunakan didalam function 
# parameter : variabel yang ditulis didalam kurung pada saat function dibuat, digunakan untuk menampung nilai yang dikirimkan saat functionnya dipanggil 
# argument : nilai yang dikirimkan ke parameter saat fungsi dipanggil 
# bagaimana jika parameter dan argumentnya tidak sesuai ?
  - jika parameter lebih sedikit dari argument, maka argument kelebihanya akan diabaikan, karakteristik ini spesipik untuk javascript 
  - jika parameter lebih banyak dari argument, maka parameter kelebihanya akan diisi dengan nilai default nilai default undefined   
# arguments 
  - variabel khusus yang namanya arguments 
  - array yang berisi nilai yang dikirimkan saat fungsi dipanggil / sudo variabel / variabel semu  

-> Cara penulisan function 
# Function Declaration
   - lebih fleksibel (dapat ditulis dimanapun) /  tulis deklarasi function sebelum atau sesudah pemanggilan function 
   - ini terjadi karena di javascript ada yang namanya hoisting / deklarasi sebuah function pasti disimpan terlebih dahulu didalam memori 
   - mudah dipahami untuk pemula  
# Function Expression   
  - Harus didefinisikan terlebih dahulu sebelum dipanggil 
  - Lebih powerfull 
     - sebagai closure
     - sebagai argumen untuk function yang lain 
     - IIFE (Immediately Invoked Function Expression)

->Variable Scope
# bagaimana sebuah variabel dapat diakses dalam program 
# di dalam bahasa pemprograman ada dua jenis scope / dua jenis lingkup 
  - block scope 
  - function scope      
  
  -> block scope 
    - ini digunakan oleh bahasa pemprograman c / java  
  
# didalam function bisa mengakses variabel global, diluar tidak bisa akses variabel lokal, tetapi didalam function kita akses variabel global 
# ketika membuat sebuah argument, argument akan menjadi lokal variabel meskipun tidak menuliskan keyword var 

-> refactoring 
# sebuah proses mengubah kode agar menjadi lebih 'baik' tanpa mengubah fungsionalitasnya 
# 'baik' :  baik ini relatif bisa beragam maknanya 
# kenapa ? 
   - readability : keterbacaan / kemudahan dalam membaca kode program       






