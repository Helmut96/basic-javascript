----------------------------------------------------------------------------
Konsep - konsep dasar pemprograman
# Variabel
# Tipe data
# Penkondisian
# Pengulangan
# Object
# Function
# Array 

-> Program 
-> Pemprograman
-> Bahasa Pemprograman

# gimana cara nulis program, disimpan dimana programnya dan bagaimana menjalankan program itu sendiri 

-> Pemprograman mengajarkan kita untuk teliti, displin dan berpikir abstrak
# teliti : pada saat menuliskan code tidak boleh salah satu karakterpun, kurang titik, kurang titik koma itu akan jadi masalah 
# displin : karena tiap - tiap bahasa pemprograman punya aturan yang berbeda - berbeda dalam menuliskan code mereka, jadi harus mengkikuti aturan dari bahasa tersebut
# abstrak : Menyembunyikan kompleksitas / Kerumitan pada saat memandanng sebuah masalah 

-> Mengubah komputer menjadi alat yang powerful
# Membuat aplikasi untuk menyelesaikan sebuah masalah 

-> Membentuk pola pikir komputasional 
# Dekomposisi
# Pengenalan pola 
# Genralisasi 
# Algorihma 
------------------------------------------------------------------------------

------------------------------------------------------------------------------
-> Program
# Program adalah kumpulan / serangkaian instruksi 
# instruksi yang kita berikan ke komputer 
# Program adalah urutan instruksi terstruktur, yang dirancang agar komputer berperilaku dengan ketentuan, dengan tujuan untuk menyelesaikan sebuah pekerjaan
# intinya adalah instruksi / kumpulan instruksi 
# instruksi harus sederhana, harus terstruktur dan sama - sama dimengerti oleh kedua belah pihak 
# instruksinya harus terstruktur dan tidak boleh terkutar, urutan disini sangatt berpengaruh 
* instruksi untuk komputer 
# memberi perintah untuk komputer 
# perintah yang diberikan melalui bahasa pemprograman tertentu 
# intruksi yang diberikan harus simple dan sederhana 
* instruksi yang sederhana 
# melakukan operasi matematika 
# menampilkan tulisan ke layar 
# mengubah ukuran, posisi, atau warna dari sebuah pixel yang ada dilayar 
# Kenapa sederhana ?
* Perilaku Komputer 
# komputer tidak begitu pintar 
# penurut, mengerjakan apa pun yang diinstruksikan, mau instruksinya benar atau salah akan dikerjain  
# tidak kenal lelah, diberikan satu intruksi dikerjakan sebanyak seribu x pasti dikerjain 
# berikanlah instruksi yang benar 
# instruksi pada komputer itu disebut dengan statement 
# statement perintah untuk komputer dalam bahasa pemprograman tertentu    

-> Pemprograman
# cara kita untuk memberikan instruksi yang simple dan terstruktur pada komputer 
# instruksi yang kita berikan harus benar dan masuk akal 
# instruksi yang kita berikan harus sesuai dengan aturan pada bahasa pemprograman tertentu 
-------------------------------------------------------------------------------

------------------------------------------------------------------------------
-> Bahasa Pemprograman 
# bahasa pemprograman mulai ada, sejak komputer pertama x ada 
# bahasa yang dipahami oleh komputer adalah bahasa mesin 
# cpu memahami bahasa mesin,bahasa yang mendekati bahasa mesin ialah assembly 
# bahasa tingkat rendah / low level language 
# bahasa yang mendekati bahasa manusia disebut bahasa tingkat tinggi / high level languge 
# semakin keatas bahasanya mudah untuk ditulis dan dibaca oleh manusia, tapi semakin lambat, kenapa harus diterjemahkan dan dioptimasi ke dalama bahasa mesin 
# bagaiman menuliskan bahasa tersebut menjadi kode - kode program atau yang dinamkan source code 
# apapun bahasanya, menuliskan source code untuk diterjemahkan kedalam bahasa mesin 
* untuk mulai menulis program, source code atau statement ada tiga hal yang harus diperhatikan 
# Bagaimana menulis source code, nulisnya dimana, menggunakan aplikasi apa, dan gimana nulisnya 
# Bagaimana source code tadi dikonversi ke bahasa mesin, ini biasnya dikerjakan secara otomatis, tau menkanisme atau konsep dibalik konversi tersebut 
# bagaimana mengeksekusi source code kita 

-> Menulis source code 
# bahasa pemprograman ditulis dengan text sederhana atau yang disebut dengan plain text 
--------------------------------------------------------------------------------
-> 3 hal penting pada saat membuat program 
#  bagaimana menuliskan source code yang kita buat 
#  bagaimana menterjemahkan source kita menjadi bahasa mesin 
# bagaimana mengeksekusi source code yang telah kita buat 

# ada dua cara menterjemahkan source code yang kita buat kedalam bahasa mesin agar bisa kita jalankan 
# ada source yang kita compile, dengan sesuatu yang namanya compiler 
# ada yang harus kita terjemahkan, atau kita interpretasi menggunakn interpreter 

-> Compiler 
# siap dijalankan oleh user, programnya cenderung lebih cepat, karena sudah teroptimasi kedalam bahasa mesin 
# source codenya cenderung lebih aman karena yang dilihat oleh user adalah hasil compilenya bukan source codenya, source codenya tetap ada di programernya 
# tidak lintas platform, tidak lintas sistem operasi, karena begitu dicompile hasil compilenya hanya compatibel untuk sistem operasi tertentu, bahkan ketika sistem operasinya sama cpunya berbeda ada kemungkinan programnya juga tidak jalan, jadi harus dicompile ulang 
# tidak fleksibel, karena ketika ada kesalahan atau ingin memodifikasi programnya harus melakukan compile ulang, karena compile adalah langkah tambahan setelah ngoding 

-> Interpreter  
# lintas plaform, tidak peduli sistem operasinya apa atau cpunya apa, asal user punya interpreternya source codenya akan bisa dijalankan, selama user punya browser javascriptnya bisa dijalankan 
# kodenya lebih fleksibel, karena tidak perlu melakukan compile ulang, mudah untuk dimodifikasi dan mudah untuk diuji, sedangkan kekuranganya adalah user butuh interpreter,
# lebih lambat, karena setiap kali buka program harus interpretasi dulu menggunakan interpreter 
# source code mudah diakses oleh orang lain 

-> Hybrid / intermediate language / byte code   
# Mengabungkan kelebihanya compiler  dan kelebihanya interpreter 




   

